
bootloader_lo:     file format elf64-littleriscv


Disassembly of section .text:

0000000080000000 <_start>:
    80000000:	0040006f          	j	80000004 <main>

0000000080000004 <main>:
    while(dst < &_ebss)
        *dst++ = 0;
    */

    // Check the core we are running on
    i = read_csr(mhartid);
    80000004:	f14027f3          	csrr	a5,mhartid
    80000008:	2781                	sext.w	a5,a5
    8000000a:	00000717          	auipc	a4,0x0
    8000000e:	20f72723          	sw	a5,526(a4) # 80000218 <i>
    //---------------------------------------------------------
    if (i != 0) {
    80000012:	cb95                	beqz	a5,80000046 <main+0x42>
        // ============================
        // ==== Running on core #1 ====
        // ============================
        core0_sync = 1;
        // wait for synchronization with core #0
        while (core1_sync == 0) {
    80000014:	00000797          	auipc	a5,0x0
    80000018:	20078793          	addi	a5,a5,512 # 80000214 <core1_sync>
    8000001c:	4398                	lw	a4,0(a5)
        core0_sync = 1;
    8000001e:	4685                	li	a3,1
    80000020:	00000617          	auipc	a2,0x0
    80000024:	1ed62823          	sw	a3,496(a2) # 80000210 <core0_sync>
        while (core1_sync == 0) {
    80000028:	e701                	bnez	a4,80000030 <main+0x2c>
            asm("nop");
    8000002a:	0001                	nop
        while (core1_sync == 0) {
    8000002c:	4398                	lw	a4,0(a5)
    8000002e:	df75                	beqz	a4,8000002a <main+0x26>
         * to the high sram, continue the execution there
         * 
         * each core has separate instruction cache
         * we must clear it before continuing
         */
        asm("fence");   // D-Cache; this may not be necessary, but it looks it doesn't hurt if it is executed
    80000030:	0ff0000f          	fence
        asm("fence.i"); // I-Cache
    80000034:	0000100f          	fence.i
        // continue at 2nd part of kboot at high sram
        asm ("jr %0" : : "r"(boothi_start));
    80000038:	0402f7b7          	lui	a5,0x402f
    8000003c:	0796                	slli	a5,a5,0x5
    8000003e:	8782                	jr	a5

        // This should never be reached!
        while (1) {
            asm("nop");
    80000040:	0001                	nop
    80000042:	0001                	nop
    80000044:	bff5                	j	80000040 <main+0x3c>
    // ============================
    // ==== Running on core #0 ====
    // ============================

    // Without this command every character is printed twice (why !?)
    rom_printf(NULL);
    80000046:	00000797          	auipc	a5,0x0
    8000004a:	2027b783          	ld	a5,514(a5) # 80000248 <__TMC_END__+0x8>
    8000004e:	639c                	ld	a5,0(a5)
{
    80000050:	1141                	addi	sp,sp,-16
    80000052:	e406                	sd	ra,8(sp)
    rom_printf(NULL);
    80000054:	4501                	li	a0,0
    80000056:	9782                	jalr	a5
    // wait for synchronization with core #1
    while (core0_sync == 0) {
    80000058:	00000797          	auipc	a5,0x0
    8000005c:	1b878793          	addi	a5,a5,440 # 80000210 <core0_sync>
    80000060:	4398                	lw	a4,0(a5)
    80000062:	e701                	bnez	a4,8000006a <main+0x66>
        asm("nop");
    80000064:	0001                	nop
    while (core0_sync == 0) {
    80000066:	4398                	lw	a4,0(a5)
    80000068:	df75                	beqz	a4,80000064 <main+0x60>
    }

    // ----------------------------------------------------------------------------------------------
    // === Initialize SPI Flash driver ===
    // spi clock init (SPI3 clock source is PLL0/2, 390 MHz)
    sysctl->clk_sel0.spi3_clk_sel = 1;
    8000006a:	50440737          	lui	a4,0x50440
    8000006e:	531c                	lw	a5,32(a4)
    80000070:	6685                	lui	a3,0x1
    sysctl->clk_en_peri.spi3_clk_en = 1;
    sysctl->clk_th1.spi3_clk_threshold = 0;
    80000072:	01000637          	lui	a2,0x1000
    sysctl->clk_sel0.spi3_clk_sel = 1;
    80000076:	8fd5                	or	a5,a5,a3
    80000078:	d31c                	sw	a5,32(a4)
    sysctl->clk_en_peri.spi3_clk_en = 1;
    8000007a:	5754                	lw	a3,44(a4)
    sysctl->clk_th1.spi3_clk_threshold = 0;
    8000007c:	167d                	addi	a2,a2,-1

    // spi3 init
    // sets spi clock to 43.333333 MHz
    spi_handle->baudr = 9;
    8000007e:	540007b7          	lui	a5,0x54000
    sysctl->clk_en_peri.spi3_clk_en = 1;
    80000082:	2006e693          	ori	a3,a3,512
    80000086:	d754                	sw	a3,44(a4)
    sysctl->clk_th1.spi3_clk_threshold = 0;
    80000088:	5f54                	lw	a3,60(a4)
    8000008a:	8ef1                	and	a3,a3,a2
    8000008c:	df54                	sw	a3,60(a4)
    spi_handle->baudr = 9;
    8000008e:	46a5                	li	a3,9
    80000090:	cbd4                	sw	a3,20(a5)
    spi_handle->imr = 0x00;
    80000092:	0207a623          	sw	zero,44(a5) # 5400002c <_start-0x2bffffd4>
    spi_handle->dmacr = 0x00;
    80000096:	0407a623          	sw	zero,76(a5)
    spi_handle->dmatdlr = 0x10;
    8000009a:	46c1                	li	a3,16
    8000009c:	cbb4                	sw	a3,80(a5)
    spi_handle->dmardlr = 0x00;
    8000009e:	0407aa23          	sw	zero,84(a5)
    spi_handle->ser = 0x00;
    800000a2:	0007a823          	sw	zero,16(a5)
    spi_handle->ssienr = 0x00;
    spi_handle->ctrlr0 = (SPI_WORK_MODE_0 << 8) | (SPI_FF_QUAD << 22) | (7 << 0);
    800000a6:	008006b7          	lui	a3,0x800
    spi_handle->ssienr = 0x00;
    800000aa:	0007a423          	sw	zero,8(a5)
    spi_handle->ctrlr0 = (SPI_WORK_MODE_0 << 8) | (SPI_FF_QUAD << 22) | (7 << 0);
    800000ae:	269d                	addiw	a3,a3,7
    800000b0:	c394                	sw	a3,0(a5)
    spi_handle->spi_ctrlr0 = 0;
    800000b2:	0e07aa23          	sw	zero,244(a5)
    spi_handle->endian = 0;

    // Enable XIP mode
    spi_handle->xip_ctrl = (0x01 << 29) | (0x02 << 26) | (0x01 << 23) | (0x01 << 22) | (0x04 << 13) |
    800000b6:	28c096b7          	lui	a3,0x28c09
    spi_handle->endian = 0;
    800000ba:	1007ac23          	sw	zero,280(a5)
    spi_handle->xip_ctrl = (0x01 << 29) | (0x02 << 26) | (0x01 << 23) | (0x01 << 22) | (0x04 << 13) |
    800000be:	4666869b          	addiw	a3,a3,1126
    800000c2:	10d7a423          	sw	a3,264(a5)
                (0x01 << 12) | (0x02 << 9) | (0x06 << 4) | (0x01 << 2) | 0x02;
    spi_handle->xip_incr_inst = 0xEB;
    800000c6:	0eb00693          	li	a3,235
    800000ca:	10d7a023          	sw	a3,256(a5)
    spi_handle->xip_mode_bits = 0x00;
    800000ce:	0e07ae23          	sw	zero,252(a5)
    spi_handle->xip_ser = 0x01;
    800000d2:	4685                	li	a3,1
    800000d4:	10d7a623          	sw	a3,268(a5)
    spi_handle->ssienr = 0x01;
    800000d8:	c794                	sw	a3,8(a5)
    sysctl->peri.spi3_xip_en = 1;
    800000da:	4f3c                	lw	a5,88(a4)
    800000dc:	66a1                	lui	a3,0x8
    800000de:	8fd5                	or	a5,a5,a3
    800000e0:	cf3c                	sw	a5,88(a4)
    // ----------------------------------------------------------------------------------------------

    // ==========================================================================
    // === Copy the 2nd part of kboot code from flash to SRAM at high address ===
    // ==========================================================================
    for (i = 0; i < BOOTHI_SIZE; i++) {
    800000e2:	00000797          	auipc	a5,0x0
    800000e6:	11e78793          	addi	a5,a5,286 # 80000200 <boothi_flash_ptr>
    800000ea:	00000717          	auipc	a4,0x0
    800000ee:	11e70713          	addi	a4,a4,286 # 80000208 <boothi_sram_ptr>
    800000f2:	639c                	ld	a5,0(a5)
    800000f4:	6318                	ld	a4,0(a4)
    800000f6:	00878693          	addi	a3,a5,8
    800000fa:	00870613          	addi	a2,a4,8
    800000fe:	00d736b3          	sltu	a3,a4,a3
    80000102:	00c7b633          	sltu	a2,a5,a2
    80000106:	0016c693          	xori	a3,a3,1
    8000010a:	00164613          	xori	a2,a2,1
    8000010e:	8ed1                	or	a3,a3,a2
    80000110:	ceb9                	beqz	a3,8000016e <main+0x16a>
    80000112:	00f766b3          	or	a3,a4,a5
    80000116:	8a9d                	andi	a3,a3,7
    80000118:	eab9                	bnez	a3,8000016e <main+0x16a>
    8000011a:	660d                	lui	a2,0x3
    8000011c:	86be                	mv	a3,a5
    8000011e:	85ba                	mv	a1,a4
    80000120:	963e                	add	a2,a2,a5
        *boothi_sram_ptr++ = *boothi_flash_ptr++;
    80000122:	6288                	ld	a0,0(a3)
    80000124:	05a1                	addi	a1,a1,8
    80000126:	06a1                	addi	a3,a3,8
    80000128:	fea5bc23          	sd	a0,-8(a1)
    8000012c:	fec69be3          	bne	a3,a2,80000122 <main+0x11e>
    80000130:	668d                	lui	a3,0x3
    80000132:	97b6                	add	a5,a5,a3
    80000134:	9736                	add	a4,a4,a3
    80000136:	00000617          	auipc	a2,0x0
    8000013a:	0cf63523          	sd	a5,202(a2) # 80000200 <boothi_flash_ptr>
    8000013e:	00000797          	auipc	a5,0x0
    80000142:	0ce7b523          	sd	a4,202(a5) # 80000208 <boothi_sram_ptr>
    80000146:	00000797          	auipc	a5,0x0
    8000014a:	0cd7a923          	sw	a3,210(a5) # 80000218 <i>
        observe the local hartâ€™s stores in a multiprocessor system.
        To make a store to instruction memory visible to all RISC-V harts,
        the writing hart has to execute a data FENCE before requesting that all remote RISC-V harts execute a FENCE.I.
    */

    core1_sync = 1;
    8000014e:	4785                	li	a5,1
    80000150:	00000717          	auipc	a4,0x0
    80000154:	0cf72223          	sw	a5,196(a4) # 80000214 <core1_sync>
    asm("fence");   // D-Cache; this may not be necessary, but it looks it doesn't hurt if it is executed
    80000158:	0ff0000f          	fence
    asm("fence.i"); // I-Cache
    8000015c:	0000100f          	fence.i
    asm ("jr %0" : : "r"(boothi_start));
    80000160:	0402f7b7          	lui	a5,0x402f
    80000164:	0796                	slli	a5,a5,0x5
    80000166:	8782                	jr	a5

    // This should never be reached!
    while (1) {
        asm("nop");
    80000168:	0001                	nop
    8000016a:	0001                	nop
    8000016c:	bff5                	j	80000168 <main+0x164>
    8000016e:	660d                	lui	a2,0x3
    80000170:	86be                	mv	a3,a5
    80000172:	85ba                	mv	a1,a4
    80000174:	963e                	add	a2,a2,a5
        *boothi_sram_ptr++ = *boothi_flash_ptr++;
    80000176:	0006c503          	lbu	a0,0(a3) # 3000 <_start-0x7fffd000>
    8000017a:	0585                	addi	a1,a1,1
    8000017c:	0685                	addi	a3,a3,1
    8000017e:	fea58fa3          	sb	a0,-1(a1)
    for (i = 0; i < BOOTHI_SIZE; i++) {
    80000182:	fec69ae3          	bne	a3,a2,80000176 <main+0x172>
    80000186:	b76d                	j	80000130 <main+0x12c>

0000000080000188 <deregister_tm_clones>:
    80000188:	00000517          	auipc	a0,0x0
    8000018c:	0b850513          	addi	a0,a0,184 # 80000240 <__TMC_END__>
    80000190:	00000797          	auipc	a5,0x0
    80000194:	0b078793          	addi	a5,a5,176 # 80000240 <__TMC_END__>
    80000198:	00a78963          	beq	a5,a0,800001aa <deregister_tm_clones+0x22>
    8000019c:	80000317          	auipc	t1,0x80000
    800001a0:	e6430313          	addi	t1,t1,-412 # 0 <_start-0x80000000>
    800001a4:	00030363          	beqz	t1,800001aa <deregister_tm_clones+0x22>
    800001a8:	8302                	jr	t1
    800001aa:	8082                	ret

00000000800001ac <__do_global_dtors_aux>:
    800001ac:	00000797          	auipc	a5,0x0
    800001b0:	0b47c783          	lbu	a5,180(a5) # 80000260 <completed.5485>
    800001b4:	ef85                	bnez	a5,800001ec <__do_global_dtors_aux+0x40>
    800001b6:	1141                	addi	sp,sp,-16
    800001b8:	e406                	sd	ra,8(sp)
    800001ba:	00000097          	auipc	ra,0x0
    800001be:	fce080e7          	jalr	-50(ra) # 80000188 <deregister_tm_clones>
    800001c2:	80000797          	auipc	a5,0x80000
    800001c6:	e3e78793          	addi	a5,a5,-450 # 0 <_start-0x80000000>
    800001ca:	cb89                	beqz	a5,800001dc <__do_global_dtors_aux+0x30>
    800001cc:	00000517          	auipc	a0,0x0
    800001d0:	02450513          	addi	a0,a0,36 # 800001f0 <__FRAME_END__>
    800001d4:	00000097          	auipc	ra,0x0
    800001d8:	000000e7          	jalr	zero # 0 <_start-0x80000000>
    800001dc:	60a2                	ld	ra,8(sp)
    800001de:	4785                	li	a5,1
    800001e0:	00000717          	auipc	a4,0x0
    800001e4:	08f70023          	sb	a5,128(a4) # 80000260 <completed.5485>
    800001e8:	0141                	addi	sp,sp,16
    800001ea:	8082                	ret
    800001ec:	8082                	ret
	...
